{
	"info": {
		"_postman_id": "5c3cd530-3403-4b81-b25e-dc9728175b11",
		"name": "Tilkynna Quickstart",
		"description": "Postman collection for interacting with the Tilkynna service, an enterprise grade utility-style report server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get an authentication token in order to get API access",
			"item": [
				{
					"name": "Get Key Session Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"    pm.expect(jsonData.access_token.length).to.be.above(12);",
									"    console.log(\"Access Token:\"+jsonData.access_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "tilkynna-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "tilkynna-test-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "secret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "tilkynna",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "38003d94-81ea-4daa-8f10-4b77dae42c2b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cc4388dc-b5a2-4c03-ab49-e0f2cf790d50",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Quickstart Steps",
			"item": [
				{
					"name": "Create a data source. ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09f48539-5c28-4db7-bdbc-72427fecb6db",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check header.status is true.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.status).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check header.id returned. Set tilkynnaDatasourceId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('header');",
									"    pm.environment.set(\"tilkynnaDatasourceId\", jsonData.header.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"tilkynna db\",\n  \"description\": \"tilkynna db\",\n  \"connection\": {\n    \"driver\": \"org.postgresql.Driver\",\n    \"url\": \"jdbc:postgresql://{{tilkynna db_host}}:5432/tilkynna\",\n    \"username\": \"postgres\",\n    \"password\": \"postgres\"\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							]
						},
						"description": "We use the Tilkynna database for this sample report. TilkynnaDB_Datasource"
					},
					"response": []
				},
				{
					"name": "Upload a report template.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c046214-9a60-4028-9448-96724acba480",
								"exec": [
									"pm.test(\"Response is CREATED\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned. Set template ID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"    pm.environment.set(\"tilkynnaSampleReportTemplateId\", jsonData.templateId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file"
								},
								{
									"key": "templateName",
									"value": "Tilkynna Sample Report",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "tilkynnaDatasources",
									"type": "text"
								},
								{
									"key": "datasourceIds",
									"value": "{{tilkynnaDatasourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						},
						"description": "This uses the sample report available in the postman testing collection."
					},
					"response": []
				},
				{
					"name": "Create an SFTP report destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ce04390-0a8e-408a-a5b7-2beb3150e714",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set sftpDestinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"  ",
									"    pm.environment.set(\"sftpDestinationId\", jsonData.header.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SFTP\",\n  \"host\": \"{{tilkynna sftp_host}}\",\n  \"port\": \"22\",\n  \"path\" : \"/upload\",\n  \"user\": \"foo\",\n  \"password\": \"pass\",\n  \"header\": {\n    \"name\": \"SFTP server\",\n    \"description\": \"our shared sftp server\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						},
						"description": "Note: The SFTP server is running as a container. Run the following command to determine it's host."
					},
					"response": []
				},
				{
					"name": "Generate a report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f8d4d67-7e92-49f1-b6ef-21a215640921",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 500000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);",
									"});",
									"",
									"pm.test(\"Check correlationId returned. Set correlationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('correlationId');",
									"    pm.environment.set(\"tilkynnaSampleReportCorrelationId\", jsonData.correlationId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"callbackUrl\": \"https://myserver.com/notification/callback/here\",\r\n  \"doNotRetry\": false,\r\n  \"exportFormat\": \"PDF\",\r\n  \"reportParameters\": [\r\n    {\r\n      \"name\": \"DestinationType\",\r\n      \"value\": \"SFTP\"\r\n    }\r\n  ],\r\n  \"destinationOptions\": {\r\n    \"destinationId\": \"{{sftpDestinationId}}\",\r\n    \"destinationParameters\": [\r\n      {\r\n        \"name\": \"path\",\r\n        \"value\": \"sub_folder\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tilkynnaSampleReportTemplateId}}/generate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tilkynnaSampleReportTemplateId}}",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Status of Report Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46f96b43-2cad-4d43-a430-63ffc3812d6f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{tilkynnaSampleReportCorrelationId}}/status",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{tilkynnaSampleReportCorrelationId}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f8aa4735-a40a-47bc-b652-bc09390f0e7a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cd7cb3cd-e8ed-423c-a283-9348ed915ca1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DATASOURCES",
			"item": [
				{
					"name": "List Drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/lookups/drivers",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"drivers"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Connection Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/lookups/connectionTypes",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"connectionTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Datasource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09f48539-5c28-4db7-bdbc-72427fecb6db",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 8000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(8000);",
									"});",
									"",
									"pm.test(\"Check header.status is true.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.status).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check header.id returned. Set datasourceId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('header');",
									"    pm.environment.set(\"datasourceId2\", jsonData.header.id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Tilkynna2\",\n  \"description\": \"add another datasource for Tilkynna\",\n  \"connection\": {\n    \"driver\": \"org.postgresql.Driver\",\n    \"url\": \"jdbc:postgresql://{{tilkynna db_host}}:5432/tilkynna\",\n    \"username\": \"postgres\",\n    \"password\": \"postgres\"\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Datasources",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/datasources",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Connection Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \n    \"driver\": \"org.postgresql.Driver\",\n    \"url\": \"jdbc:postgresql://{{tilkynna db_host}}:5432/tilkynna\",\n    \"username\": \"postgres\",\n    \"password\": \"postgres\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inactivate Datasource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99696f36-de27-48f5-8a15-23fea9125866",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources/{{datasourceId2}}/inactivate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources",
								"{{datasourceId2}}",
								"inactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Connection by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08f69864-5e9e-464f-b2c8-4febdb82de8d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources/{{datasourceId2}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources",
								"{{datasourceId2}}",
								"validate"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ed90dcbe-9012-4b0d-ba31-2610b62b6f71",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fd5d932d-d0da-4e61-a209-75f268566eff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DESTINATIONS",
			"item": [
				{
					"name": "Get Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6474b6f8-8079-4684-a430-63b19b7fce73",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Set destinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"destinationId0\", jsonData[0].id);",
									"    pm.environment.set(\"destinationId1\", jsonData[1].id);",
									"    pm.environment.set(\"destinationId2\", jsonData[2].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SFTP destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5543e8c8-ba72-4d19-a21f-5b923ba10119",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set sftpDestinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"  ",
									"    pm.environment.set(\"sftpDestinationId2\", jsonData.header.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SFTP\",\n  \"host\": \"{{tilkynna sftp_host}}\",\n  \"port\": \"22\",\n  \"path\" : \"/upload\",\n  \"user\": \"foo\",\n  \"password\": \"pass\",\n  \"header\": {\n    \"name\": \"The sftp server 22\",\n    \"description\": \"our shared sftp server\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "653a064d-db93-4a18-a1d2-4b24907c6a8f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{sftpDestinationId2}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{sftpDestinationId2}}",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inactivate Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bc11df-8a96-444a-af92-68ffffb727da",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{sftpDestinationId2}}/inactivate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{sftpDestinationId2}}",
								"inactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "update sftp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ddb24f5-5cc8-4e86-9bcd-c93e8207567a",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SFTP\",\n  \"host\": \"{{tilkynna sftp_host}}\",\n  \"port\": \"22\",\n  \"path\" : \"/changed_folder\",\n  \"user\": \"changed_user\",\n  \"password\": \"changed_password\",\n  \"header\": {\n    \"name\": \"changed_name\",\n    \"description\": \"changed_description\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{sftpDestinationId2}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{sftpDestinationId2}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "451bc4f3-66e1-439b-8dcb-1a90f1bffec5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1d6f66bd-5bd2-4265-b5b8-9e52a21aff36",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TEMPLATES",
			"item": [
				{
					"name": "List Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Template Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e7b03de-8427-4017-9353-7a847c72bc16",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 9000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tilkynnaSampleReportTemplateId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tilkynnaSampleReportTemplateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Template (with tags)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f293d21-22ed-4b37-b0e5-ba232d339f41",
								"exec": [
									"pm.test(\"Response is CREATED\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"    pm.environment.set(\"tagsTestTemplateId\", jsonData.templateId);",
									"});",
									"",
									"pm.test(\"Check tempalte tags returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tags');",
									"    pm.expect(jsonData.tags[0].tag).to.eql(\"tag-test1\");",
									"    pm.expect(jsonData.tags[1].tag).to.eql(\"tag-test2\");",
									"    pm.expect(jsonData.tags[2].tag).to.eql(\"tag-test3\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file"
								},
								{
									"key": "templateName",
									"value": "Create Template (with tags)",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "tag-test1, tag-test2, tag-test3",
									"type": "text"
								},
								{
									"key": "datasourceIds",
									"value": "{{datasourceId2}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Check all template tags returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].tag).to.eql(\"tag-test1\");",
									"    pm.expect(jsonData[1].tag).to.eql(\"tag-test2\");",
									"    pm.expect(jsonData[2].tag).to.eql(\"tag-test3\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}:{{port}}/lookups/tags",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTags : filterTag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Check only tag-test2 returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].tag).to.eql(\"tag-test2\");",
									"    ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}:{{port}}/lookups/tags?filterTag=2",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"tags"
							],
							"query": [
								{
									"key": "filterTag",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Template Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tagsTestTemplateId}}/tags",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tagsTestTemplateId}}",
								"tags"
							]
						},
						"description": "Deletes all tags assigned to a template."
					},
					"response": []
				},
				{
					"name": "Create Tempalte Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"});",
									"",
									"pm.test(\"Check template tags returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tags');",
									"    pm.expect(jsonData.tags[0].tag).to.eql(\"create-template-tag-1\");",
									"    pm.expect(jsonData.tags[1].tag).to.eql(\"create-template-tag-2\");",
									"    pm.expect(jsonData.tags[2].tag).to.eql(\"create-template-tag-3\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"tag\": \"create-template-tag-1\"\n\t},\n\t{\n\t\t\"tag\": \"create-template-tag-2\"\n\t},\n\t{\n\t\t\"tag\": \"create-template-tag-3\"\n\t}\n]"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tagsTestTemplateId}}/tags",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tagsTestTemplateId}}",
								"tags"
							]
						},
						"description": "Creates document tags for a given document."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba11aef0-6c50-43a3-bfc1-1cfe45e8514b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a52274dd-669c-4706-9e9a-7d95bc4f182b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GENERATE_REPORT",
			"item": [
				{
					"name": "Get Destinations ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6474b6f8-8079-4684-a430-63b19b7fce73",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateReport_ToStream_PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba84076b-c8c9-42ea-8077-49b1bd624c5b",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 500000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);",
									"});",
									"",
									"pm.test(\"Check correlationId returned. Set correlationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('correlationId');",
									"    pm.environment.set(\"correlationId\", jsonData.correlationId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"callbackUrl\": \"https://myserver.com/notification/callback/here\",\r\n  \"doNotRetry\": false,\r\n  \"exportFormat\": \"PDF\",\r\n  \"reportParameters\": [\r\n    {\r\n      \"name\": \"DestinationType\",\r\n      \"value\": \"STREAM\"\r\n    }\r\n  ],\r\n  \"destinationOptions\": {\r\n    \"destinationId\": \"2f4fe19f-0bfa-47ee-bf70-cea39874ee12\"\r\n  }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tilkynnaSampleReportTemplateId}}/generate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tilkynnaSampleReportTemplateId}}",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Report Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{correlationId}}/status",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{correlationId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "DownloadReport",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{correlationId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{correlationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateReport_ToStream_HTML",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba84076b-c8c9-42ea-8077-49b1bd624c5b",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 500000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);",
									"});",
									"",
									"pm.test(\"Check correlationId returned. Set correlationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('correlationId');",
									"    pm.environment.set(\"correlationId\", jsonData.correlationId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"callbackUrl\": \"https://myserver.com/notification/callback/here\",\r\n  \"doNotRetry\": false,\r\n  \"exportFormat\": \"HTML\",\r\n  \"reportParameters\": [\r\n    {\r\n      \"name\": \"DestinationType\",\r\n      \"value\": \"STREAM\"\r\n    }\r\n  ],\r\n  \"destinationOptions\": {\r\n    \"destinationId\": \"2f4fe19f-0bfa-47ee-bf70-cea39874ee12\"\r\n  }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tilkynnaSampleReportTemplateId}}/generate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tilkynnaSampleReportTemplateId}}",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateReport_ToStream_XLSX",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba84076b-c8c9-42ea-8077-49b1bd624c5b",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 500000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);",
									"});",
									"",
									"pm.test(\"Check correlationId returned. Set correlationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('correlationId');",
									"    pm.environment.set(\"correlationId\", jsonData.correlationId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"callbackUrl\": \"https://myserver.com/notification/callback/here\",\r\n  \"doNotRetry\": false,\r\n  \"exportFormat\": \"XLSL\",\r\n  \"reportParameters\": [\r\n    {\r\n      \"name\": \"DestinationType\",\r\n      \"value\": \"STREAM\"\r\n    }\r\n  ],\r\n  \"destinationOptions\": {\r\n    \"destinationId\": \"2f4fe19f-0bfa-47ee-bf70-cea39874ee12\"\r\n  }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tilkynnaSampleReportTemplateId}}/generate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tilkynnaSampleReportTemplateId}}",
								"generate"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f097f824-33e7-436a-8bb4-2e9699e0ab85",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d6027498-2cba-47b0-95c4-5d6c60959218",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{session_access_token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9ab803cd-cdb0-49a9-a772-fc90a671544c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "442620ce-692a-46be-b853-aa88e21633b5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}